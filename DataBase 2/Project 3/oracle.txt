CREATE TABLE COURSE (
  CourseID number(10) NOT NULL,
  CourseTitle varchar2(15),
  TutionFee number(10),
  PRIMARY KEY (CourseID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE COURSE_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER COURSE_seq_tr
 BEFORE INSERT ON COURSE FOR EACH ROW
 WHEN (NEW.CourseID IS NULL)
BEGIN
 SELECT COURSE_seq.NEXTVAL INTO :NEW.CourseID FROM DUAL;
END;
/

CREATE TABLE STUDENT (
  StudentID number(10) NOT NULL,
  SectionID number(10),
  FirstName varchar2(50),
  LastName varchar2(50),
  PhoneNumber varchar2(15),
  PhoneType varchar2(15),
  AddressID number(10),
  DepartmentID number(10),
  ProgarmID number(10),
  PRIMARY KEY (StudentID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE STUDENT_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER STUDENT_seq_tr
 BEFORE INSERT ON STUDENT FOR EACH ROW
 WHEN (NEW.StudentID IS NULL)
BEGIN
 SELECT STUDENT_seq.NEXTVAL INTO :NEW.StudentID FROM DUAL;
END;
/

CREATE TABLE PROGRAM (
  ProgarmID number(10) NOT NULL,
  ProgarmTitle varchar2(15) DEFAULT 'Data Science',
  PRIMARY KEY (ProgarmID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE PROGRAM_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER PROGRAM_seq_tr
 BEFORE INSERT ON PROGRAM FOR EACH ROW
 WHEN (NEW.ProgarmID IS NULL)
BEGIN
 SELECT PROGRAM_seq.NEXTVAL INTO :NEW.ProgarmID FROM DUAL;
END;
/

CREATE TABLE PROVINCE (
  ProvinceID number(10) NOT NULL,
  ProvinceName varchar2(15),
  PRIMARY KEY (ProvinceID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE PROVINCE_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER PROVINCE_seq_tr
 BEFORE INSERT ON PROVINCE FOR EACH ROW
 WHEN (NEW.ProvinceID IS NULL)
BEGIN
 SELECT PROVINCE_seq.NEXTVAL INTO :NEW.ProvinceID FROM DUAL;
END;
/

CREATE TABLE DEPARTMENT (
  DepartmentID number(10) NOT NULL,
  DepartmentName varchar2(30),
  PRIMARY KEY (DepartmentID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE DEPARTMENT_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER DEPARTMENT_seq_tr
 BEFORE INSERT ON DEPARTMENT FOR EACH ROW
 WHEN (NEW.DepartmentID IS NULL)
BEGIN
 SELECT DEPARTMENT_seq.NEXTVAL INTO :NEW.DepartmentID FROM DUAL;
END;
/

CREATE TABLE ADDRESS (
  AddressID number(10) NOT NULL,
  Address varchar2(50),
  AddressType varchar2(15),
  CityID number(10),
  ProvinceID number(10),
  CountryID number(10),
  PRIMARY KEY (AddressID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE ADDRESS_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER ADDRESS_seq_tr
 BEFORE INSERT ON ADDRESS FOR EACH ROW
 WHEN (NEW.AddressID IS NULL)
BEGIN
 SELECT ADDRESS_seq.NEXTVAL INTO :NEW.AddressID FROM DUAL;
END;
/

CREATE TABLE COUNTRY (
  CountryID number(10) NOT NULL,
  CountryName varchar2(15),
  PRIMARY KEY (CountryID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE COUNTRY_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER COUNTRY_seq_tr
 BEFORE INSERT ON COUNTRY FOR EACH ROW
 WHEN (NEW.CountryID IS NULL)
BEGIN
 SELECT COUNTRY_seq.NEXTVAL INTO :NEW.CountryID FROM DUAL;
END;
/

CREATE TABLE CITY (
  CityID number(10) NOT NULL,
  CityName varchar2(15),
  PRIMARY KEY (CityID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE CITY_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER CITY_seq_tr
 BEFORE INSERT ON CITY FOR EACH ROW
 WHEN (NEW.CityID IS NULL)
BEGIN
 SELECT CITY_seq.NEXTVAL INTO :NEW.CityID FROM DUAL;
END;
/

CREATE TABLE SECTION (
  SectionID number(10) NOT NULL,
  SectionName varchar2(50),
  PRIMARY KEY (SectionID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE SECTION_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER SECTION_seq_tr
 BEFORE INSERT ON SECTION FOR EACH ROW
 WHEN (NEW.SectionID IS NULL)
BEGIN
 SELECT SECTION_seq.NEXTVAL INTO :NEW.SectionID FROM DUAL;
END;
/

CREATE TABLE STUDENT_COURSE (
  StudentID number(10),
  CourseID number(10),
  ProfessorID number(10),
  PercentGrade NUMBER(4,1),
  LetterGrade NUMBER(4,1),
  PRIMARY KEY (StudentID, CourseID)
);

CREATE TABLE PROFESSOR (
  ProfessorID number(10) NOT NULL,
  Salutation varchar2(50) DEFAULT 'Dr',
  FirstName varchar2(50),
  LastName varchar2(50),
  DepartmentID number(10),
  PRIMARY KEY (ProfessorID)
);

-- Generate ID using sequence and trigger
CREATE SEQUENCE PROFESSOR_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER PROFESSOR_seq_tr
 BEFORE INSERT ON PROFESSOR FOR EACH ROW
 WHEN (NEW.ProfessorID IS NULL)
BEGIN
 SELECT PROFESSOR_seq.NEXTVAL INTO :NEW.ProfessorID FROM DUAL;
END;
/

CREATE TABLE PROGRAM_COURSE (
  ProgarmID number(10),
  CourseID number(10),
  PRIMARY KEY (ProgarmID, CourseID)
);



ALTER TABLE ADDRESS
ADD FOREIGN KEY (CityID) REFERENCES CITY(CityID),
ADD FOREIGN KEY (ProvinceID) REFERENCES PROVINCE(ProvinceID),
ADD FOREIGN KEY (CountryID) REFERENCES COUNTRY(CountryID);

ALTER TABLE STUDENT
ADD FOREIGN KEY (SectionID) REFERENCES SECTION(SectionID),
ADD FOREIGN KEY (AddressID) REFERENCES ADDRESS(AddressID),
ADD FOREIGN KEY (DepartmentID) REFERENCES DEPARTMENT(DepartmentID),
ADD FOREIGN KEY (ProgarmID) REFERENCES PROGRAM(ProgarmID);

ALTER TABLE STUDENT_COURSE
ADD FOREIGN KEY (StudentID) REFERENCES STUDENT(StudentID),
ADD FOREIGN KEY (CourseID) REFERENCES COURSE(CourseID),
ADD FOREIGN KEY (ProfessorID) REFERENCES PROFESSOR(ProfessorID);

ALTER TABLE PROGRAM_COURSE
ADD FOREIGN KEY (ProgarmID) REFERENCES PROGRAM(ProgarmID),
ADD FOREIGN KEY (CourseID) REFERENCES COURSE(CourseID);

ALTER TABLE PROFESSOR
ADD FOREIGN KEY (DepartmentID) REFERENCES DEPARTMENT(DepartmentID);
